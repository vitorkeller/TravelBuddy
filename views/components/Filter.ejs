<div class="space-y-4 grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-3">
    <details class="group relative overflow-visible rounded border border-gray-300 shadow-sm">
        <summary
            class="flex items-center justify-between gap-2 p-3 text-gray-700 transition-colors hover:text-gray-900 [&::-webkit-details-marker]:hidden">
            <span class="text-sm font-medium text-black"> Categorias </span>
            <span class="transition-transform group-open:-rotate-180">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                    stroke="currentColor" class="size-4">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 8.25l-7.5 7.5-7.5-7.5" />
                </svg>
            </span>
        </summary>
        <div
            class="absolute left-0 w-full z-50 divide-y divide-gray-300 border border-gray-300 bg-white shadow-lg rounded-b">
            <div class="flex items-center justify-between px-2 py-2">
                <span id="selected-count" class="text-sm text-gray-700"> 0 Selecionados </span>
                <button id="clear-all" type="button" class="text-xs text-black hover:underline">
                    Limpar Tudo
                </button>
            </div>
            <fieldset class="p-3">
                <legend class="sr-only"> Checkboxes </legend>
                <div class="flex flex-col items-start gap-3 max-h-56 overflow-y-auto">
                    <% categorias.forEach(function(categoria, idx) { %>
                        <label for="Option<%= idx %>" class="inline-flex items-center gap-3">
                            <input type="checkbox" class="size-5 rounded border-gray-300 shadow-sm category-checkbox"
                                id="Option<%= idx %>" value="<%= categoria.catCodigo %>" <% if (typeof
                                categoriasSelecionadas !=='undefined' &&
                                categoriasSelecionadas.includes(categoria.catCodigo.toString())) { %>checked<% } %> />
                                <span class="text-sm font-medium text-black">
                                    <%= categoria.catNome %>
                                </span>
                        </label>
                        <% }) %>
                </div>
            </fieldset>
        </div>
    </details>
</div>
<script>
    function updateSelectedCount() {
        const checkboxes = document.querySelectorAll('.category-checkbox');
        const count = Array.from(checkboxes).filter(cb => cb.checked).length;
        document.getElementById('selected-count').textContent = `${count} Selecionados`;
    }

    function applyFilter() {
        const checkboxes = document.querySelectorAll('.category-checkbox:checked');
        const selectedCategories = Array.from(checkboxes).map(cb => cb.value);
        const url = new URL(window.location.href);
        url.searchParams.delete('categorias');

        if (selectedCategories.length > 0) {
            url.searchParams.set('categorias', selectedCategories.join(','));
        }
        window.history.pushState({}, '', url.toString());
        fetchPublicacoes(selectedCategories);
    }
    function fetchPublicacoes(categorias) {
        const publicacoesContainer = document.querySelector('.publicacoes-container');
        if (publicacoesContainer) {
            publicacoesContainer.classList.add('loading');
        }
        const params = new URLSearchParams();
        if (categorias.length > 0) {
            params.set('categorias', categorias.join(','));
        }
        setTimeout(() => {
            fetch(`/api/publicacoes?${params.toString()}`)
                .then(response => response.json())
                .then(data => {
                    setTimeout(() => {
                        renderPublicacoes(data.publicacoes);
                        if (publicacoesContainer) {
                            publicacoesContainer.classList.remove('loading');
                        }
                    }, 100);
                })
                .catch(error => {
                    console.error('Erro ao buscar publicações:', error);
                    if (publicacoesContainer) {
                        publicacoesContainer.classList.remove('loading');
                    }
                });
        }, 100);
    }
    function renderPublicacoes(publicacoes) {
        const container = document.querySelector('.publicacoes-container');
        if (!container) return;
        if (!publicacoes || publicacoes.length === 0) {
            container.innerHTML = '<div class="col-span-4 text-center text-gray-600 py-10">Nenhuma publicação encontrada.</div>';
            return;
        }
        const colunas = [[], [], [], []];
        publicacoes.forEach((pub, idx) => {
            colunas[idx % 4].push(pub);
        });
        const htmlColunas = colunas.map(col => {
            const htmlPublicacoes = col.map(pub => `
                <div class="group relative publicacao-item">
                    <a href="/Imagem/${pub.pubCodigo}">
                        <img src="/uploads/Publicações/${pub.pubFoto}" loading="lazy"
                             alt="${pub.pubTitulo}"
                             class="w-full max-w-full rounded-lg bg-gray-100 object-cover group-hover:opacity-75 h-auto block">
                    </a>
                </div>
            `).join('');
            return `<div class="flex flex-col gap-y-4">${htmlPublicacoes}</div>`;
        }).join('');
        container.style.opacity = '0';
        container.style.transform = 'translateY(10px)';
        setTimeout(() => {
            container.innerHTML = htmlColunas;
            container.classList.add('fade-in');
            container.style.opacity = '1';
            container.style.transform = 'translateY(0)';
            setTimeout(() => {
                container.classList.remove('fade-in');
            }, 800);
        }, 200);
    }
    function clearFilter() {
        const url = new URL(window.location.href);
        url.searchParams.delete('categorias');
        window.history.pushState({}, '', url.toString());
        fetchPublicacoes([]);
    }
    document.querySelectorAll('.category-checkbox').forEach(cb => {
        cb.addEventListener('change', function () {
            updateSelectedCount();
            clearTimeout(window.filterTimeout);
            window.filterTimeout = setTimeout(() => {
                applyFilter();
            }, 100);
        });
    });
    document.getElementById('clear-all').addEventListener('click', function () {
        document.querySelectorAll('.category-checkbox').forEach(cb => {
            cb.checked = false;
        });
        updateSelectedCount();
        clearFilter();
    });
    updateSelectedCount();
</script>
